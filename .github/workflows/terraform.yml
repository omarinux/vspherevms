name: 'Terraform'

on:
  workflow_dispatch:
  #push:
  #  branches: [ "main" ]
  #pull_request:

permissions:
  #contents: read
  contents: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: mosc01
    #environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    #- name: Terraform Format
    #  run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      #if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false

    - name: Commit changes
      run: |
        git config --global user.email "omarinux@gmail.com"
        git config --global user.name "GitHub Actions"
        echo `git add terraform.tfstate && git commit -m "Update Terraform tfstate"`
        #git add terraform.tfstate
        #git commit -m "Update Terraform tfstete"
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  ansible:
    name: 'ansible'
    needs: terraform
    runs-on: mosc01
    #environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

#    - name: setup python
#      uses: actions/setup-python@v4
#      with:
#        python-version: 3.10.12
#        arch: x64
#        platform: linux
#          
#    - name: Install dependencies Including Ansible
#      run: |
#        python -m pip install --upgrade pip
#        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#        if [ -f test-requirements.txt ]; then pip install -r test-requirements.txt; fi

    - name: run playbook
      run: |
        ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i inventory playbook.yaml
